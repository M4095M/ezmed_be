// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model admin {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  id          Int           @id @default(autoincrement())
  fullName    String
  email       String        @unique
  password    String
  phone       String
  birthday    String
  photo       String
  resetCode   String?
  status      Status        @default(INACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comment     comment[]
  note        note[]
  Pay         Pay[]
  playlist    playlist[]
  authSession authSession[]
  refreshToken String?
}

model schoolYear {
  id         Int          @id @default(autoincrement())
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  module     module[]
  Permission Permission[]
}

model module {
  id           Int        @id @default(autoincrement())
  title        String
  image        String
  description  String     @default("")
  schoolYear   schoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  course       course[]
}

model course {
  id        Int        @id @default(autoincrement())
  title     String
  type      CourseType @default(theorique)
  module    module     @relation(fields: [moduleId], references: [id])
  moduleId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  scenario  scenario[]
  question  question[]
}

model scenario {
  id               Int                @id @default(autoincrement())
  title            String
  description      String             @db.Text
  image            String?
  year             String
  course           course             @relation(fields: [courseId], references: [id])
  courseId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  question         question[]
  activityPratique activityPratique[]
}

model question {
  id               Int                 @id @default(autoincrement())
  content          String              @db.Text
  explication      String              @db.Text
  image            String?
  year             String
  title            String
  scenario         scenario?           @relation(fields: [scenarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scenarioId       Int?
  course           course?             @relation(fields: [courseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courseId         Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  proposition      proposition[]
  comment          comment[]
  note             note[]
  activityTeorique activityTheorique[]
}

model proposition {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  correct     Boolean
  alternative Boolean  @default(false)
  question    question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id          Int          @id @default(autoincrement())
  title       String
  price       Float
  date        DateTime     @default(now())
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Pay         Pay[]
  Permission  Permission[]
  Coupon      Coupon[]
}

model activityTheorique {
  playlistId Int
  playlist   playlist   @relation(fields: [playlistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  question   question   @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId Int
  answer     AnswerType @default(IGNORED)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@id([playlistId, questionId])
}

model activityPratique {
  playlistId Int
  playlist   playlist   @relation(fields: [playlistId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scenario   scenario   @relation(fields: [scenarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  scenarioId Int
  answer     AnswerType @default(IGNORED)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@id([playlistId, scenarioId])
}

model comment {
  id         Int      @id @default(autoincrement())
  user       user     @relation(fields: [userId], references: [id])
  userId     Int
  question   question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId Int
  date       DateTime @default(now())
  content    String   @db.Text
  isPingged  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model note {
  id          Int      @id @default(autoincrement())
  user        user     @relation(fields: [userId], references: [id])
  userId      Int
  question    question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId  Int
  date        DateTime @default(now())
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model shop {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pay {
  id        Int         @id @default(autoincrement())
  date      DateTime    @default(now())
  type      paymentType
  prof      String
  user      user        @relation(fields: [userId], references: [id])
  userId    Int
  plan      Plan        @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId    Int
  status    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Permission {
  planId       Int
  plan         Plan       @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  schoolYearId Int
  schoolYear   schoolYear @relation(fields: [schoolYearId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([planId, schoolYearId])
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  status    Boolean  @default(true)
  planId    Int
  plan      Plan     @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model playlist {
  id               Int                 @id @default(autoincrement())
  title            String
  image            String?
  userId           Int
  isPingged        Boolean             @default(false)
  description      String?             @db.Text
  type             playlistType        @default(COSTUM)
  user             user                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  activityTeorique activityTheorique[]
  activityPratique activityPratique[]
}

model authSession {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  user      user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}

enum AnswerType {
  CORRECT
  INCORRECT
  IGNORED
}

enum CourseType {
  theorique
  pratique
}

enum paymentType {
  coupon
  baridiMob
  ccp
}

enum playlistType {
  COSTUM
  REVISION
  EXAM
}
